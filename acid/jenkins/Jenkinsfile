pipeline {
	agent any
	//agent {
	//	docker {
	//		image 'maven:3.9-eclipse-temurin-17'
    //        args '-v /var/run/docker.sock:/var/run/docker.sock' // pour avoir Docker inside
    //    }
    //}

    environment {
		REPOSITORY_URL = 'https://github.com/walidbensmida/devops-training.git'
        DOCKER_IMAGE = 'walidbensmida/devops-training:latest'
        DOCKER_CREDENTIALS_ID = 'dockerhub-credentials'
        KUBECONFIG_CREDENTIALS_ID = 'kubeconfig-gke'
        DEPLOYMENT_FILE = 'acid/k8s/devops-training/deployment.yaml'
    }

    stages {
		stage('Checkout') {
			steps {
				git "${REPOSITORY_URL}"
            }
        }

        stage('Build App') {
			steps {
				sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
			steps {
				sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }

        stage('Push Docker Image') {
			steps {
				withDockerRegistry([credentialsId: "${DOCKER_CREDENTIALS_ID}", url: '']) {
					sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }

        stage('Deploy to Kubernetes') {
			steps {
				withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIALS_ID}", variable: 'KUBECONFIG')]) {
					sh """
                        kubectl apply -f ${DEPLOYMENT_FILE}
                        kubectl rollout restart deployment devops-training
                    """
                }
            }
        }
    }
}
